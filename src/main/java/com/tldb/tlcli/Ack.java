/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tldb.tlcli;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2023-07-01")
public class Ack implements org.apache.thrift.TBase<Ack, Ack._Fields>, java.io.Serializable, Cloneable, Comparable<Ack> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ack");

  private static final org.apache.thrift.protocol.TField OK_FIELD_DESC = new org.apache.thrift.protocol.TField("ok", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField ERR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errCode", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ERROR_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("errorDesc", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AckStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AckTupleSchemeFactory();

  public boolean ok; // required
  public long errCode; // required
  public @org.apache.thrift.annotation.Nullable String errorDesc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OK((short)1, "ok"),
    ERR_CODE((short)2, "errCode"),
    ERROR_DESC((short)3, "errorDesc");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OK
          return OK;
        case 2: // ERR_CODE
          return ERR_CODE;
        case 3: // ERROR_DESC
          return ERROR_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OK_ISSET_ID = 0;
  private static final int __ERRCODE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OK, new org.apache.thrift.meta_data.FieldMetaData("ok", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ERR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ERROR_DESC, new org.apache.thrift.meta_data.FieldMetaData("errorDesc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ack.class, metaDataMap);
  }

  public Ack() {
  }

  public Ack(
    boolean ok,
    long errCode,
    String errorDesc)
  {
    this();
    this.ok = ok;
    setOkIsSet(true);
    this.errCode = errCode;
    setErrCodeIsSet(true);
    this.errorDesc = errorDesc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Ack(Ack other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ok = other.ok;
    this.errCode = other.errCode;
    if (other.isSetErrorDesc()) {
      this.errorDesc = other.errorDesc;
    }
  }

  @Override
  public Ack deepCopy() {
    return new Ack(this);
  }

  @Override
  public void clear() {
    setOkIsSet(false);
    this.ok = false;
    setErrCodeIsSet(false);
    this.errCode = 0;
    this.errorDesc = null;
  }

  public boolean isOk() {
    return this.ok;
  }

  public Ack setOk(boolean ok) {
    this.ok = ok;
    setOkIsSet(true);
    return this;
  }

  public void unsetOk() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OK_ISSET_ID);
  }

  /** Returns true if field ok is set (has been assigned a value) and false otherwise */
  public boolean isSetOk() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OK_ISSET_ID);
  }

  public void setOkIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OK_ISSET_ID, value);
  }

  public long getErrCode() {
    return this.errCode;
  }

  public Ack setErrCode(long errCode) {
    this.errCode = errCode;
    setErrCodeIsSet(true);
    return this;
  }

  public void unsetErrCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  /** Returns true if field errCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  public void setErrCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERRCODE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getErrorDesc() {
    return this.errorDesc;
  }

  public Ack setErrorDesc(@org.apache.thrift.annotation.Nullable String errorDesc) {
    this.errorDesc = errorDesc;
    return this;
  }

  public void unsetErrorDesc() {
    this.errorDesc = null;
  }

  /** Returns true if field errorDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorDesc() {
    return this.errorDesc != null;
  }

  public void setErrorDescIsSet(boolean value) {
    if (!value) {
      this.errorDesc = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case OK:
      if (value == null) {
        unsetOk();
      } else {
        setOk((Boolean)value);
      }
      break;

    case ERR_CODE:
      if (value == null) {
        unsetErrCode();
      } else {
        setErrCode((Long)value);
      }
      break;

    case ERROR_DESC:
      if (value == null) {
        unsetErrorDesc();
      } else {
        setErrorDesc((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OK:
      return isOk();

    case ERR_CODE:
      return getErrCode();

    case ERROR_DESC:
      return getErrorDesc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OK:
      return isSetOk();
    case ERR_CODE:
      return isSetErrCode();
    case ERROR_DESC:
      return isSetErrorDesc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof Ack)
      return this.equals((Ack)that);
    return false;
  }

  public boolean equals(Ack that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ok = true;
    boolean that_present_ok = true;
    if (this_present_ok || that_present_ok) {
      if (!(this_present_ok && that_present_ok))
        return false;
      if (this.ok != that.ok)
        return false;
    }

    boolean this_present_errCode = true;
    boolean that_present_errCode = true;
    if (this_present_errCode || that_present_errCode) {
      if (!(this_present_errCode && that_present_errCode))
        return false;
      if (this.errCode != that.errCode)
        return false;
    }

    boolean this_present_errorDesc = true && this.isSetErrorDesc();
    boolean that_present_errorDesc = true && that.isSetErrorDesc();
    if (this_present_errorDesc || that_present_errorDesc) {
      if (!(this_present_errorDesc && that_present_errorDesc))
        return false;
      if (!this.errorDesc.equals(that.errorDesc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((ok) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(errCode);

    hashCode = hashCode * 8191 + ((isSetErrorDesc()) ? 131071 : 524287);
    if (isSetErrorDesc())
      hashCode = hashCode * 8191 + errorDesc.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Ack other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetOk(), other.isSetOk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ok, other.ok);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetErrCode(), other.isSetErrCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errCode, other.errCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetErrorDesc(), other.isSetErrorDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorDesc, other.errorDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Ack(");
    boolean first = true;

    sb.append("ok:");
    sb.append(this.ok);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errCode:");
    sb.append(this.errCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorDesc:");
    if (this.errorDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.errorDesc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'ok' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'errCode' because it's a primitive and you chose the non-beans generator.
    if (errorDesc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'errorDesc' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AckStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AckStandardScheme getScheme() {
      return new AckStandardScheme();
    }
  }

  private static class AckStandardScheme extends org.apache.thrift.scheme.StandardScheme<Ack> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Ack struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ok = iprot.readBool();
              struct.setOkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.errCode = iprot.readI64();
              struct.setErrCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERROR_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorDesc = iprot.readString();
              struct.setErrorDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOk()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ok' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetErrCode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'errCode' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Ack struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OK_FIELD_DESC);
      oprot.writeBool(struct.ok);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ERR_CODE_FIELD_DESC);
      oprot.writeI64(struct.errCode);
      oprot.writeFieldEnd();
      if (struct.errorDesc != null) {
        oprot.writeFieldBegin(ERROR_DESC_FIELD_DESC);
        oprot.writeString(struct.errorDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AckTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AckTupleScheme getScheme() {
      return new AckTupleScheme();
    }
  }

  private static class AckTupleScheme extends org.apache.thrift.scheme.TupleScheme<Ack> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Ack struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeBool(struct.ok);
      oprot.writeI64(struct.errCode);
      oprot.writeString(struct.errorDesc);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Ack struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.ok = iprot.readBool();
      struct.setOkIsSet(true);
      struct.errCode = iprot.readI64();
      struct.setErrCodeIsSet(true);
      struct.errorDesc = iprot.readString();
      struct.setErrorDescIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

